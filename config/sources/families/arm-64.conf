BOOTBRANCH='tag:v2020.07'
BOOTDIR='u-boot'
OFFSET=16
BOOTSIZE=512
BOOTFS_TYPE=fat
SERIALCON='ttyS2:1500000'

# FIXED_IMAGE_SIZE=5000

BOOTDELAY=0
OVERLAY_PREFIX='rockchip'

UBOOT_TARGET_MAP="u-boot-dtb.bin;;idbloader.bin uboot.img trust.bin"
ATFSOURCE=''
ATF_COMPILE='no'

GOVERNOR="ondemand"
CPUMIN="504000"
CPUMAX="2132000"

ARCH=arm64

SCR_ENV='extlinux.conf'
SCR_BOOT='boot-aml-s912_ENV.cmd'
SCR_BOOT_EMMC='boot-aml-s912_EMMC.cmd'


case $BRANCH in
	legacy)
	KERNELDIR='linux-aml-dev'
	KERNELSOURCE='git://git.kernel.org/pub/scm/linux/kernel/git/khilman/linux-amlogic.git'
	KERNELBRANCH='branch:integ'
	;;

	current)
	KERNELDIR='linux-current'
	KERNELSOURCE='https://github.com/150balbes/Amlogic_s905-kernel'
	KERNELBRANCH='branch:5.7'
	;;

	dev)
	KERNELDIR=$MAINLINE_KERNEL_DIR
	KERNELSOURCE=$MAINLINE_KERNEL_SOURCE
	KERNELBRANCH='branch:master'
	EXTRAWIFI="no"
	;;
esac

if [[ $ADD_UBOOT == yes ]]; then
        write_uboot_platform()
	{
		if [[ "$2" != /dev/loop* ]]; then
			local mmcblk_prefix
			mmcblk_prefix=$(echo "$2" | grep -Po "mmcblk\d")

			logger "${FUNCNAME[0]}(): mmcblk_prefix = $mmcblk_prefix" 

			if [[ -n "$mmcblk_prefix" ]]; then

				# unset force-read-only flag
				echo 0 > "/sys/block/${mmcblk_prefix}boot0/force_ro"
				echo 0 > "/sys/block/${mmcblk_prefix}boot1/force_ro"
				logger "/sys/block/mmcblk1boot0/force_ro values after unsetting read-only flag: $(</sys/block/mmcblk1boot0/force_ro)"
				logger "/sys/block/mmcblk1boot1/force_ro values after unsetting read-only flag: $(</sys/block/mmcblk1boot0/force_ro)"

				local uboot_name=
				if grep -Eq "^GXL.+S905W" /sys/devices/soc0/soc_id; then
					uboot_name=u-boot-jethome_armbian_j80_v1.bin
				elif grep -Eq "^AXG" /sys/devices/soc0/soc_id; then
					uboot_name=u-boot-jethome_armbian_j100_v1.bin
				else
					logger "${FUNCNAME[0]}(): SoC detection failed. Unable to install u-boot."
				fi

				logger "${FUNCNAME[0]}(): uboot_name = $uboot_name"

				if [[ -n "$uboot_name" ]]; then

						local uboot_size_in_kbytes=$(($(stat --printf "%s" "$1/$uboot_name")/1024))
						local uboot_offset=1 # 512 bytes in dd
						logger "${FUNCNAME[0]}(): uboot_size_in_kbytes = $uboot_size_in_kbytes"
						logger "${FUNCNAME[0]}(): uboot_offset = $uboot_offset"

						local result=

						if dd seek=$uboot_offset ibs=1024 count=$uboot_size_in_kbytes if="$1/$uboot_name" of="/dev/${mmcblk_prefix}boot0" conv=fsync status=progress; then
							if dd seek=$uboot_offset ibs=1024 count=$uboot_size_in_kbytes if="$1/$uboot_name" of="/dev/${mmcblk_prefix}boot1" conv=fsync status=progress; then
								if dd seek=$uboot_offset ibs=1024 count=$uboot_size_in_kbytes if="$1/$uboot_name" of="/dev/${mmcblk_prefix}p1" conv=fsync status=progress; then
									logger "do defenv"
									local env_size_in_mbytes=$(($(blockdev --getsize64 "/dev/${mmcblk_prefix}p5")/1024/1024))
									logger "${FUNCNAME[0]}(): env_size_in_mbytes = $env_size_in_mbytes"

									if dd bs=1M count=$env_size_in_mbytes if=/dev/zero of="/dev/${mmcblk_prefix}p5" conv=fsync status=progress; then
										sync
										result=1
									fi
								fi
							fi
						fi

						if [[ -n "$result" ]]; then
							logger "${FUNCNAME[0]}(): u-boot successfulley installed"
						else
							logger "${FUNCNAME[0]}(): dd commands failed. Unable to install u-boot."
							return 1
						fi
				else
					return 1
				fi
			else
				logger "${FUNCNAME[0]}(): mmcblk_prefix is empty. Unable to install u-boot."
				return 1
			fi
		else
			echo "${FUNCNAME[0]}(): loop device in destination argument. Do nothing."
		fi
	}

	setup_write_uboot_platform()
	{
		:
	}

	uboot_custom_postprocess()
	{
		:
	}
fi

family_tweaks()
{
	# enable root login via the serial console  ttys2 may be deprecated
	echo "ttyS2" >> $SDCARD/etc/securetty
	echo "ttyFIQ0" >> $SDCARD/etc/securetty
	echo 'ttyAML0' >> $SDCARD/etc/securetty
	echo 'DAEMON_ARGS="-w 1024 --data=16"' > $SDCARD/etc/default/haveged

	cp $SRC/packages/bsp/mpv/mpv_mainline.conf $SDCARD/etc/mpv/mpv.conf
	install -m 755 $SRC/$BOARD_DIR/ddbr $SDCARD/usr/bin/

	mkdir -p $SDCARD/boot/extlinux
	cp $SRC/$BOARD_DIR/$SCR_ENV $SDCARD/boot/extlinux/extlinux.conf
	cp $SRC/$BOARD_DIR/extlinux.conf-menu $SDCARD/boot/extlinux/extlinux.conf-menu

	cp $SRC/$BOARD_DIR/boot.ini $SDCARD/boot/boot.ini

	cp $SRC/$BOARD_DIR/u-boot-s905 $SDCARD/boot/u-boot-s905
	cp $SRC/$BOARD_DIR/u-boot-s905x-s912 $SDCARD/boot/u-boot-s905x-s912
	cp $SRC/$BOARD_DIR/u-boot-s905x2-s922 $SDCARD/boot/u-boot-s905x2-s922

	install -m 755 $SRC/$BOARD_DIR/install-aml.sh $SDCARD/root/install-aml.sh
	install -m 755 $SRC/$BOARD_DIR/install-aml-s905-emmc.sh $SDCARD/root/install-aml-s905-emmc.sh
	install -m 755 $SRC/$BOARD_DIR/install-aw.sh $SDCARD/root/install-aw.sh
	install -m 755 $SRC/$BOARD_DIR/install-rk3399.sh $SDCARD/root/install-rk3399.sh
	install -m 755 $SRC/$BOARD_DIR/install-rk3399.sh $SDCARD/root/install-rk3399-edge.sh
	install -m 755 $SRC/$BOARD_DIR/install-rk3399.sh $SDCARD/root/install-rk3399-edge-nvme.sh
	install -m 755 $SRC/$BOARD_DIR/install-rk3399-renegade.sh $SDCARD/root/install-rk3399-renegade.sh
	install -m 755 $SRC/$BOARD_DIR/install-rk3399-renegade-nvme.sh $SDCARD/root/install-rk3399-renegade-nvme.sh
	install -m 755 $SRC/$BOARD_DIR/install-rk3399-nanopct4-nvme.sh $SDCARD/root/install-rk3399-nanopct4-nvme.sh
	install -m 755 $SRC/$BOARD_DIR/install-rk3399-rockpi4-nvme.sh $SDCARD/root/install-rk3399-rockpi4-nvme.sh
	install -m 755 $SRC/$BOARD_DIR/install-rk3328.sh $SDCARD/root/install-rk3328.sh

	cp $SRC/$BOARD_DIR/fstab $SDCARD/root/fstab

	mkimage -C none -A arm -T script -d $SRC/config/bootscripts/boot-aml_autoscript.cmd $SDCARD/boot/aml_autoscript
	touch $SDCARD/boot/aml_autoscript.zip

	mkimage -C none -A arm -T script -d $SRC/config/bootscripts/$SCR_BOOT $SDCARD/boot/s905_autoscript

	mkimage -C none -A arm -T script -d $SRC/config/bootscripts/$SCR_BOOT_EMMC $SDCARD/boot/emmc_autoscript

	install -m 755 $SRC/$BOARD_DIR/sound.sh $SDCARD/usr/bin/sound.sh
	cp -R -f $SRC/$BOARD_DIR/cards  $SDCARD/usr/share/alsa/

	cp -R $SRC/$BOARD_DIR/u-boot  $SDCARD/root/

	cp -R $SRC/$BOARD_DIR/LE/lib64  $SDCARD/
	cp -R $SRC/$BOARD_DIR/LE/lib/x86_64-linux-gnu  $SDCARD/lib/


	echo 'Section "Device"
    Identifier  "Default Device"
    Driver      "modesetting"
    Option      "AccelMethod"    "none"     ### "glamor" to enable 3D acceleration, "none" to disable.
EndSection
Section "ServerFlags"
        Option  "AutoAddGPU" "off"
        Option "Debug" "dmabuf_capable"
EndSection
Section "OutputClass"
        Identifier "Lima"  # "Panfrost"
        MatchDriver "meson"  # sun4i-drm  rockchip
        Driver "modesetting"
        Option "PrimaryGPU" "true"
EndSection' >> $SDCARD/etc/X11/xorg.conf.d/01-armbian-defaults.conf

	mv $SDCARD/lib/firmware/brcm/brcmfmac4356-sdio-nanopi-m4v2.bin $SDCARD/lib/firmware/brcm/brcmfmac4356-sdio.bin
	mv $SDCARD/lib/firmware/brcm/brcmfmac4356-sdio-nanopi-m4v2.txt $SDCARD/lib/firmware/brcm/brcmfmac4356-sdio.txt

}
